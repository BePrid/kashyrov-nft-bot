import os
import asyncio
import logging
import nest_asyncio
import aiosqlite
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

nest_asyncio.apply()
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

TOKEN = os.getenv("TOKEN")

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: –≤–∫–ª", callback_data="toggle_autobuy")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def init_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                balance INTEGER DEFAULT 0
            )
        """)
        await db.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with aiosqlite.connect("users.db") as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, first_name) VALUES (?, ?)",
            (user.id, user.first_name)
        )
        await db.commit()
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_deposit"):
        try:
            amount = int(update.message.text)
            if amount <= 0:
                raise ValueError
            net = int(amount * 0.97)
            fee = amount - net
            context.user_data["deposit_amount"] = net
            context.user_data["fee_amount"] = fee
            context.user_data["awaiting_deposit"] = False

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_deposit")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])

            await update.message.reply_text(
                f"üí´ –í—ã —É–∫–∞–∑–∞–ª–∏ {amount} –∑–≤—ë–∑–¥\n"
                f"‚úÖ –ë—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: {net} –∑–≤—ë–∑–¥\n"
                f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {fee} –∑–≤—ë–∑–¥\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:",
                reply_markup=keyboard
            )
        except:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∑–≤—ë–∑–¥.")
        return

    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "deposit":
        context.user_data["awaiting_deposit"] = True
        await query.message.reply_text("üí´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∏—Å–ª–∏—Ç—å (–∫–æ–º–∏—Å—Å–∏—è 3%)")
    elif query.data == "confirm_deposit":
        user_id = query.from_user.id
        amount = context.user_data.get("deposit_amount", 0)
        async with aiosqlite.connect("users.db") as db:
            await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
            await db.commit()
        await query.message.edit_text(f"üéâ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –∑–≤—ë–∑–¥!")
        context.user_data.clear()
    elif query.data == "balance":
        user_id = query.from_user.id
        async with aiosqlite.connect("users.db") as db:
            async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
        await query.message.edit_text(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {row[0]} –∑–≤—ë–∑–¥", reply_markup=get_main_menu())
    elif query.data == "profile":
        user = query.from_user
        await query.message.edit_text(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n–ò–º—è: {user.first_name}\nID: {user.id}", reply_markup=get_main_menu())
    elif query.data == "back_to_main":
        context.user_data.clear()
        await query.message.edit_text("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())
    else:
        await query.message.edit_text(f"–í—ã –Ω–∞–∂–∞–ª–∏: {query.data}", reply_markup=get_main_menu())

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
