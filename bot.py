import os
import logging
import asyncio
import aiosqlite
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

TOKEN = os.getenv("TOKEN")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
         InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: –≤–∫–ª", callback_data="toggle_autobuy")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
def get_settings_menu():
    keyboard = [
        [InlineKeyboardButton("üîΩ –ú–∏–Ω. –ª–∏–º–∏—Ç", callback_data="set_min_limit")],
        [InlineKeyboardButton("üîº –ú–∞–∫—Å. –ª–∏–º–∏—Ç", callback_data="set_max_limit")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
def get_deposit_menu():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_deposit")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def init_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                balance REAL DEFAULT 0,
                auto_buy INTEGER DEFAULT 1
            )
        """)
        await db.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with aiosqlite.connect("users.db") as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, first_name) VALUES (?, ?)",
            (user.id, user.first_name)
        )
        await db.commit()
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=get_main_menu())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "balance":
        async with aiosqlite.connect("users.db") as db:
            async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
                balance = row[0] if row else 0
        await query.edit_message_text(f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} –∑–≤—ë–∑–¥", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]))

    elif data == "settings":
        await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_menu())

    elif data == "deposit":
        await query.edit_message_text("‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî 3%\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=get_deposit_menu())

    elif data == "confirm_deposit":
        await query.edit_message_text("üí´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∏—Å–ª–∏—Ç—å:")

    elif data == "toggle_autobuy":
        async with aiosqlite.connect("users.db") as db:
            async with db.execute("SELECT auto_buy FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
                status = not bool(row[0]) if row else True
            await db.execute("UPDATE users SET auto_buy = ? WHERE user_id = ?", (int(status), user_id))
            await db.commit()
        text = "ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: –≤–∫–ª" if status else "ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: –≤—ã–∫–ª"
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    elif data == "profile":
        async with aiosqlite.connect("users.db") as db:
            async with db.execute("SELECT balance, auto_buy FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
                balance = row[0] if row else 0
                auto = "–í–∫–ª" if row[1] else "–í—ã–∫–ª"
        await query.edit_message_text(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nID: {user_id}\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} –∑–≤—ë–∑–¥\n–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: {auto}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )

    elif data == "back_to_main":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    else:
        await query.edit_message_text(f"–í—ã –Ω–∞–∂–∞–ª–∏: {data}", reply_markup=get_main_menu())

async def main():
    await init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
