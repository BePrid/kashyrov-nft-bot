import os
import asyncio
import logging
import aiosqlite
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

TOKEN = os.getenv("TOKEN")

# ================= –ö–Ω–æ–ø–∫–∏ ====================

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
         InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: –≤–∫–ª", callback_data="toggle_autobuy")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_settings_menu():
    keyboard = [
        [InlineKeyboardButton("üîΩ –ú–∏–Ω. –ª–∏–º–∏—Ç", callback_data="set_min_limit")],
        [InlineKeyboardButton("üîº –ú–∞–∫—Å. –ª–∏–º–∏—Ç", callback_data="set_max_limit")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_deposit_menu():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_deposit")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_menu():
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    return InlineKeyboardMarkup(keyboard)

# ================ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===================

async def init_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                balance INTEGER DEFAULT 0,
                auto_buy INTEGER DEFAULT 1
            )
        """)
        await db.commit()

# ================ –•–µ–Ω–¥–ª–µ—Ä—ã ===================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with aiosqlite.connect("users.db") as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id, first_name) VALUES (?, ?)", (user.id, user.first_name))
        await db.commit()
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    async with aiosqlite.connect("users.db") as db:
        if query.data == "balance":
            async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
                balance = row[0] if row else 0
            await query.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∑–≤—ë–∑–¥", reply_markup=get_back_menu())

        elif query.data == "settings":
            await query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_menu())

        elif query.data == "deposit":
            await query.edit_message_text("‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî 3%
–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=get_deposit_menu())

        elif query.data == "profile":
            async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
                balance = row[0] if row else 0
            await query.edit_message_text(
                f"üë§ –í–∞—à ID: {user_id}
üí´ –ë–∞–ª–∞–Ω—Å: {balance} –∑–≤—ë–∑–¥
üèÜ –†–µ–π—Ç–∏–Ω–≥: —Å–∫–æ—Ä–æ",
                reply_markup=get_back_menu()
            )

        elif query.data == "toggle_autobuy":
            await db.execute("UPDATE users SET auto_buy = 1 - auto_buy WHERE user_id = ?", (user_id,))
            await db.commit()
            async with db.execute("SELECT auto_buy FROM users WHERE user_id = ?", (user_id,)) as cursor:
                row = await cursor.fetchone()
                status = "–≤–∫–ª" if row[0] else "–≤—ã–∫–ª"
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())

        elif query.data == "back_to_main":
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())

        elif query.data in ["set_min_limit", "set_max_limit", "confirm_deposit"]:
            await query.edit_message_text("‚è≥ –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_back_menu())

# ================ –ó–∞–ø—É—Å–∫ ===================

async def main():
    await init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
