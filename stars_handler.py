from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_STAR_AMOUNT, CONFIRMING_PAYMENT = range(2)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–≤—ë–∑–¥
pending_star_inputs = {}

async def start_topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.edit_text(
        "üí´ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥–∞–º–∏.
–ú—ã –±–µ—Ä—ë–º –∫–æ–º–∏—Å—Å–∏—é 3%.
–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∏—Å–ª–∏—Ç—å:"
    )
    return WAITING_FOR_STAR_AMOUNT

async def receive_star_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if not text.isdigit() or int(text) <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return WAITING_FOR_STAR_AMOUNT

    pending_star_inputs[user_id] = int(text)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_payment")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    await update.message.reply_text(
        f"–í—ã —É–∫–∞–∑–∞–ª–∏ {text} –∑–≤—ë–∑–¥.
–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã –±–æ—Ç—É.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRMING_PAYMENT

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    amount = pending_star_inputs.get(user_id)

    if not amount:
        await update.callback_query.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏.")
        return ConversationHandler.END

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
    received = int(amount * 0.97)
    fee = amount - received

    await update.callback_query.answer()

    # –ó–∞–º–µ–Ω–∏—Ç–µ @YOUR_BOT_USERNAME –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è –±–æ—Ç–∞
    bot_username = context.bot.username
    deep_link = f"https://t.me/{bot_username}?start={user_id}_topup_{amount}"

    await update.callback_query.message.edit_text(
        f"üí´ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} –∑–≤—ë–∑–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
"
        f"–ú—ã –∑–∞—á–∏—Å–ª–∏–º {received} –∑–≤—ë–∑–¥, –∞ {fee} –ø–æ–π–¥—É—Ç –≤ –∫–æ–º–∏—Å—Å–∏—é.

"
        f"üîó [–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã –±–æ—Ç—É]({deep_link})",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def get_star_topup_handler():
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(start_topup, pattern="^topup$")],
        states={
            WAITING_FOR_STAR_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_star_amount)],
            CONFIRMING_PAYMENT: [CallbackQueryHandler(confirm_payment, pattern="^confirm_payment$"),
                                 CallbackQueryHandler(cancel, pattern="^back_to_main$")]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern="^back_to_main$")]
    )
